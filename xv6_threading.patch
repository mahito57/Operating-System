diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..648536d
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,10 @@
+{
+    "files.associations": {
+        "spinlock.h": "c",
+        "riscv.h": "c",
+        "param.h": "c",
+        "memlayout.h": "c",
+        "proc.h": "c",
+        "defs.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..7f8b9b6 100644
--- a/Makefile
+++ b/Makefile
@@ -87,7 +87,7 @@ $U/initcode: $U/initcode.S
 tags: $(OBJS) _init
 	etags *.S *.c
 
-ULIB = $U/ulib.o $U/usys.o $U/printf.o $U/umalloc.o
+ULIB = $U/ulib.o $U/usys.o $U/printf.o $U/umalloc.o $U/spinlock.o $U/mutex.o $U/condVar.o $U/semaphore.o
 
 _%: %.o $(ULIB)
 	$(LD) $(LDFLAGS) -T $U/user.ld -o $@ $^
@@ -128,6 +128,7 @@ UPROGS=\
 	$U/_rm\
 	$U/_sh\
 	$U/_stressfs\
+	$U/_threads\
 	$U/_usertests\
 	$U/_grind\
 	$U/_wc\
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..2898320 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,12 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             clone(uint64 fcn,uint64 arg,uint64 stack);
+int             join(int);
+void            exitThread(void);
+void            cvwake(void);
+void            cvwakeall(void);
+void            newsleep(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -164,8 +170,12 @@ pagetable_t     uvmcreate(void);
 void            uvmfirst(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
+uint64          uvmderangemirror(pagetable_t pagetable, uint64 oldsz, uint64 newsz);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64);
+int             uvmrangemirror(pagetable_t, pagetable_t, uint64, uint64);
 void            uvmfree(pagetable_t, uint64);
+void            uvmdemirror(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
 pte_t *         walk(pagetable_t, uint64, int);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..eb15734 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -13,7 +13,9 @@ struct proc proc[NPROC];
 struct proc *initproc;
 
 int nextpid = 1;
+int nextmemid = 1;
 struct spinlock pid_lock;
+struct spinlock mem_lock;
 
 extern void forkret(void);
 static void freeproc(struct proc *p);
@@ -102,6 +104,18 @@ allocpid()
   return pid;
 }
 
+int
+allocmemid()
+{
+  int memid;
+  acquire(&mem_lock);
+  memid = nextmemid;
+  nextmemid = nextmemid + 1;
+  release(&mem_lock);
+
+  return memid;
+}
+
 // Look in the process table for an UNUSED proc.
 // If found, initialize state required to run in the kernel,
 // and return with p->lock held.
@@ -123,6 +137,7 @@ allocproc(void)
 
 found:
   p->pid = allocpid();
+  p->mem_id = allocmemid();
   p->state = USED;
 
   // Allocate a trapframe page.
@@ -158,8 +173,16 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+  if(p->pagetable){
+    if(p->is_thread == 0){
+      proc_freepagetable(p->pagetable, p->sz);
+    }else {
+      uvmunmap(p->pagetable, TRAMPOLINE, 1, 0);
+      uvmunmap(p->pagetable, TRAPFRAME, 1, 0);
+      uvmdemirror(p->pagetable,p->sz);
+    }
+  }
+
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -260,17 +283,33 @@ int
 growproc(int n)
 {
   uint64 sz;
-  struct proc *p = myproc();
+  int memid;
+  struct proc *mp = myproc();
 
-  sz = p->sz;
+  acquire(&mp->memlock);
+  sz = mp->sz;
+  memid = mp->mem_id;
   if(n > 0){
-    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+    if((sz = uvmalloc(mp->pagetable, sz, sz + n, PTE_W)) == 0) {
       return -1;
     }
   } else if(n < 0){
-    sz = uvmdealloc(p->pagetable, sz, sz + n);
+    sz = uvmdealloc(mp->pagetable, sz, sz + n);
   }
-  p->sz = sz;
+  mp->sz = sz;
+  //changes start
+  for(struct proc* p = proc; p < &proc[NPROC]; p++){
+    if(p->mem_id == memid && p!=mp){
+      acquire(&p->lock);
+      if(n>0){
+        uvmrangemirror(mp->pagetable, p->pagetable, sz, sz+n);
+      }else if(n < 0){
+        uvmderangemirror(p->pagetable, sz, sz-n);
+      }
+      release(&p->lock);
+    }
+  }
+  release(&mp->memlock);
   return 0;
 }
 
@@ -681,3 +720,194 @@ procdump(void)
     printf("\n");
   }
 }
+
+int
+clone(uint64 fcn, uint64 arg, uint64 stack)
+{
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+  // Copy user memory from parent to child.
+  if(uvmmirror(p->pagetable, np->pagetable, p->sz) < 0){
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+  np->sz = p->sz;
+
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+  //align by 16 bytes
+  uint64 sp = stack+4096;
+  sp -= (sp%16);
+  // Cause fork to return 0 in the child.
+  np->trapframe->a0 = arg;
+  np->trapframe->epc = fcn;
+  np->trapframe->sp = sp;
+  np->is_thread = 1;
+  np->mem_id = p->mem_id;
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+}
+
+int
+join(int pid)
+{
+  struct proc *pp;
+  int havekids;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp->parent == p){
+        // make sure the child isn't still in exit() or swtch().
+        acquire(&pp->lock);
+        pp->pid = pid;
+        havekids = 1;
+        if(pp->state == ZOMBIE){
+          freeproc(pp);
+          release(&pp->lock);
+          release(&wait_lock);
+          return pid;
+        }
+        release(&pp->lock);
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || killed(p)){
+      release(&wait_lock);
+      return -1;
+    }
+
+    // Wait for a child to exit.
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+  }
+}
+
+void
+exitThread()
+{
+  struct proc *p = myproc();
+
+  if(p == initproc)
+    panic("init exiting");
+
+  // Close all open files.
+  for(int fd = 0; fd < NOFILE; fd++){
+    if(p->ofile[fd]){
+      struct file *f = p->ofile[fd];
+      fileclose(f);
+      p->ofile[fd] = 0;
+    }
+  }
+
+  begin_op();
+  iput(p->cwd);
+  end_op();
+  p->cwd = 0;
+
+  acquire(&wait_lock);
+
+  // Give any children to init.
+  reparent(p);
+
+  // Parent might be sleeping in wait().
+  wakeup(p->parent);
+
+  acquire(&p->lock);
+
+  p->state = ZOMBIE;
+
+  release(&wait_lock);
+
+  // Jump into the scheduler, never to return.
+  sched();
+  panic("zombie exit");
+}
+
+void
+cvwake()
+{
+  struct proc *p;
+
+  for(p = proc; p < &proc[NPROC]; p++) {
+    if(p != myproc()){
+      acquire(&p->lock);
+      if(p->state == SLEEPING) {
+        p->state = RUNNABLE;
+      }
+      release(&p->lock);
+    }
+  }
+}
+
+void
+cvwakeall()
+{
+  struct proc *p;
+
+  for(p = proc; p < &proc[NPROC]; p++) {
+      {
+      acquire(&p->lock);
+      if(p->state == SLEEPING) {
+        p->state = RUNNABLE;
+      }
+      release(&p->lock);
+    }
+  }
+}
+
+void
+newsleep()
+{
+  struct proc *p = myproc();
+  
+  // Must acquire p->lock in order to
+  // change p->state and then call sched.
+  // Once we hold p->lock, we can be
+  // guaranteed that we won't miss any wakeup
+  // (wakeup locks p->lock),
+  // so it's okay to release lk.
+
+  acquire(&p->lock);  //DOC: sleeplock1
+
+  p->state = SLEEPING;
+
+  sched();
+
+  // Reacquire original lock.
+  release(&p->lock);
+  // acquire(lk);
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..61df4ee 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -95,6 +95,10 @@ struct proc {
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
 
+  struct spinlock memlock;	// find places to set and release the locks
+  int is_thread;               // if it is thread
+  int mem_id;                   // All threads will have the same physical pages with the mother, hence the same memory ID
+
   // these are private to the process, so p->lock need not be held.
   uint64 kstack;               // Virtual address of kernel stack
   uint64 sz;                   // Size of process memory (bytes)
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..5e2d913 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,12 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
+extern uint64 sys_cvwake(void);
+extern uint64 sys_cvwakeall(void);
+extern uint64 sys_newsleep(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +132,12 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create]   sys_thread_create,
+[SYS_thread_exit]     sys_thread_exit,
+[SYS_thread_join]     sys_thread_join,
+[SYS_cvwake]     sys_cvwake,
+[SYS_cvwakeall]     sys_cvwakeall,
+[SYS_newsleep]    sys_newsleep,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..a4f7636 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,9 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create   22
+#define SYS_thread_join     23
+#define SYS_thread_exit     24
+#define SYS_cvwake          25
+#define SYS_cvwakeall       26
+#define SYS_newsleep        27
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..51f1915 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,55 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int
+sys_thread_create(void)
+{
+  uint64 function, arg, stack;
+
+  argaddr(0, &function);
+
+  argaddr(1, &arg);
+
+  argaddr(2, &stack);
+
+  return clone(function, arg, stack);
+}
+
+int
+sys_thread_join(void)
+{
+  int tid;
+
+  argint(0, &tid);
+
+  return join(tid);
+}
+
+int
+sys_thread_exit(void)
+{
+  exitThread();
+  return 0;
+}
+
+int
+sys_cvwake(void)
+{
+  cvwake();
+  return 0;
+}
+
+int
+sys_cvwakeall(void)
+{
+  cvwakeall();
+  return 0;
+}
+
+int
+sys_newsleep(void)
+{
+  newsleep();
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..2fac5ee 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -266,6 +266,19 @@ uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
   return newsz;
 }
 
+uint64
+uvmderangemirror(pagetable_t pagetable, uint64 oldsz, uint64 newsz){
+  if(newsz >= oldsz)
+    return oldsz;
+
+  if(PGROUNDUP(newsz) < PGROUNDUP(oldsz)){
+    int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
+    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 0);
+  }
+
+  return newsz;
+}
+
 // Recursively free page-table pages.
 // All leaf mappings must already have been removed.
 void
@@ -296,6 +309,15 @@ uvmfree(pagetable_t pagetable, uint64 sz)
   freewalk(pagetable);
 }
 
+void
+uvmdemirror(pagetable_t pagetable, uint64 sz)
+{
+  if(sz > 0)
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 0);
+  freewalk(pagetable);
+}
+
+
 // Given a parent process's page table, copy
 // its memory into a child's page table.
 // Copies both the page table and the
@@ -332,6 +354,55 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 sz){
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmmirror: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmmirror: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    if(mappages(new, i, PGSIZE, pa, flags) != 0){
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
+int
+uvmrangemirror(pagetable_t old, pagetable_t new, uint64 start, uint64 end){
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  start = PGROUNDUP(start);
+  for(i = start; i < end; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmrangemirror: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmrangemirror: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    if(mappages(new, i, PGSIZE, pa, flags) != 0){
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
diff --git a/user/condVar.c b/user/condVar.c
new file mode 100644
index 0000000..af9ded1
--- /dev/null
+++ b/user/condVar.c
@@ -0,0 +1,61 @@
+#include "condVar.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+void thread_cond_init(struct thread_cond *cond) {
+    //cond->mutex = malloc(sizeof(struct thread_mutex));
+    thread_mutex_init(cond->mlock);
+    thread_mutex_init(cond->cvlock);
+    cond->signal = 0;
+}
+
+void thread_cond_wait(struct thread_cond *lk, struct thread_mutex *mlock){
+    // Release the mutex to allow other threads to proceed
+    thread_mutex_unlock(mlock);
+    
+    // Acquire the condition variable lock
+    thread_mutex_lock(lk->cvlock);
+
+    // Wait until the condition is satisfied
+    while (lk->signal == 0) {
+        newsleep();
+    }
+
+    // Reset the signal
+    lk->signal = 0;
+
+    // Release the condition variable lock
+    thread_mutex_unlock(lk->cvlock);
+
+    // Reacquire the original mutex
+    thread_mutex_lock(mlock);
+}
+
+void thread_cond_signal(struct thread_cond *lk){
+    // Acquire the condition variable lock
+    thread_mutex_lock(lk->cvlock);
+
+    // Set the signal to indicate one thread is being notified
+    lk->signal = 1;
+
+    // Wake up a waiting thread
+    cvwake();
+
+    // Release the condition variable lock
+    thread_mutex_unlock(lk->cvlock);
+}
+
+void thread_cond_broadcast(struct thread_cond *lk){
+    // Acquire the condition variable lock
+    thread_mutex_lock(lk->cvlock);
+
+    // Set the signal to indicate multiple threads are being notified
+    lk->signal = 1;
+
+    // Wake up all waiting threads
+    cvwakeall();
+
+    // Release the condition variable lock
+    thread_mutex_unlock(lk->cvlock);
+}
diff --git a/user/condVar.h b/user/condVar.h
new file mode 100644
index 0000000..01a7257
--- /dev/null
+++ b/user/condVar.h
@@ -0,0 +1,18 @@
+#ifndef CONDVAR_H
+#define CONDVAR_H
+
+#include "mutex.h" // Include the mutex header
+
+struct thread_cond {
+    struct thread_mutex *mlock;
+    struct thread_mutex *cvlock;
+    
+    int signal;
+};
+
+void thread_cond_init(struct thread_cond *cond);
+void thread_cond_wait(struct thread_cond *cond, struct thread_mutex *mutex);
+void thread_cond_signal(struct thread_cond *cond);
+void thread_cond_broadcast(struct thread_cond *cond);
+
+#endif // CONDVAR_H
diff --git a/user/mutex.c b/user/mutex.c
new file mode 100644
index 0000000..4999a27
--- /dev/null
+++ b/user/mutex.c
@@ -0,0 +1,19 @@
+#include "mutex.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+void thread_mutex_init(struct thread_mutex *m) {
+    m->locked = 0;
+}
+
+void thread_mutex_lock(struct thread_mutex *m) {
+    while (__sync_lock_test_and_set(&m->locked, 1) != 0) {
+        // Another thread holds the lock, yield the CPU
+        sleep(1);
+    }
+}
+
+void thread_mutex_unlock(struct thread_mutex *m) {
+    __sync_lock_release(&m->locked);
+}
diff --git a/user/mutex.h b/user/mutex.h
new file mode 100644
index 0000000..6cd9912
--- /dev/null
+++ b/user/mutex.h
@@ -0,0 +1,12 @@
+#ifndef MUTEXLOCK_H
+#define MUTEXLOCK_H
+
+struct thread_mutex {
+    int locked;
+};
+
+void thread_mutex_init(struct thread_mutex *m);
+void thread_mutex_lock(struct thread_mutex *m);
+void thread_mutex_unlock(struct thread_mutex *m);
+
+#endif // MUTEXLOCK_H
diff --git a/user/semaphore.c b/user/semaphore.c
new file mode 100644
index 0000000..f3795b5
--- /dev/null
+++ b/user/semaphore.c
@@ -0,0 +1,30 @@
+#include "semaphore.h"
+#include "mutex.h"
+#include "condVar.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+void thread_semaphore_init(struct thread_semaphore *sem, int initial_count) {
+    sem->count = initial_count;
+    thread_mutex_init(sem->mutex);
+    thread_cond_init(sem->cond);
+}
+
+void thread_semaphore_wait(struct thread_semaphore *sem) {
+    thread_mutex_lock(sem->mutex);
+    while (sem->count <= 0) {
+        thread_cond_wait(sem->cond, sem->mutex);
+    }
+    sem->count--;
+    thread_mutex_unlock(sem->mutex);
+}
+
+void thread_semaphore_signal(struct thread_semaphore *sem) {
+    thread_mutex_lock(sem->mutex);
+    sem->count++;
+    if(sem->count == 1){
+        thread_cond_signal(sem->cond);
+    }
+    thread_mutex_unlock(sem->mutex);
+}
diff --git a/user/semaphore.h b/user/semaphore.h
new file mode 100644
index 0000000..7eaeeb5
--- /dev/null
+++ b/user/semaphore.h
@@ -0,0 +1,14 @@
+#ifndef SEMAPHORE_H
+#define SEMAPHORE_H
+
+struct thread_semaphore {
+    int count;
+    struct thread_mutex *mutex;
+    struct thread_cond *cond;
+};
+
+void thread_semaphore_init(struct thread_semaphore *sem, int initial_count);
+void thread_semaphore_wait(struct thread_semaphore *sem);
+void thread_semaphore_signal(struct thread_semaphore *sem);
+
+#endif // SEMAPHORE_H
diff --git a/user/spinlock.c b/user/spinlock.c
new file mode 100644
index 0000000..4345c18
--- /dev/null
+++ b/user/spinlock.c
@@ -0,0 +1,28 @@
+// Mutual exclusion spin locks.
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/spinlock.h"
+
+void
+thread_spin_init(struct thread_spinlock *lk)
+{
+  lk->locked = 0;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void
+thread_spin_lock(struct thread_spinlock *lk)
+{
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0);
+  __sync_synchronize();
+}
+
+// Release the lock.
+void
+thread_spin_unlock(struct thread_spinlock *lk)
+{
+  __sync_synchronize();
+  __sync_lock_release(&lk->locked);
+}
diff --git a/user/spinlock.h b/user/spinlock.h
new file mode 100644
index 0000000..39b6099
--- /dev/null
+++ b/user/spinlock.h
@@ -0,0 +1,8 @@
+// Mutual exclusion lock.
+struct thread_spinlock {
+  volatile uint8 locked;       // Is the lock held?
+};
+
+void thread_spin_init(struct thread_spinlock *lk);
+void thread_spin_lock(struct thread_spinlock *lk);
+void thread_spin_unlock(struct thread_spinlock *lk);
\ No newline at end of file
diff --git a/user/thread b/user/thread
new file mode 100644
index 0000000..e69de29
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..50e6bfa
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,80 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/spinlock.h"
+#include "user/mutex.h"
+#include "user/semaphore.h"
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+volatile int total_balance = 0;
+struct thread_spinlock lock;
+struct thread_mutex mlock;
+struct thread_semaphore semlock;
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i;
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;
+}
+
+void do_work(void *arg){
+    int i;
+    int old;
+    thread_spin_lock(&lock);
+    struct balance *b = (struct balance*) arg;
+    printf( "Starting do_work: s:%s\n", b->name);
+    thread_spin_unlock(&lock);
+
+    for (i = 0; i < b->amount; i++) {
+        // lock and mlock will be implemented by you.
+        //thread_spin_lock(&lock);
+        thread_mutex_lock(&mlock);
+        //thread_semaphore_wait(&semlock);
+            old = total_balance;
+            delay(100000);
+	    //if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+            total_balance = old + 1;
+        //thread_spin_unlock(&lock);
+        thread_mutex_unlock(&mlock);
+        //thread_semaphore_signal(&semlock);
+
+    }
+
+    printf( "Done s:%s\n", b->name);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+
+  struct balance b1 = {"b1", 2800};
+  struct balance b2 = {"b2", 3300};
+
+  void *s1, *s2;
+  int thread1, thread2, r1, r2;
+  thread_spin_init(&lock);
+  thread_mutex_init(&mlock);
+  //thread_semaphore_init(&semlock,1);
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2);
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
+      thread1, r1, thread2, r2, total_balance);
+
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..150ea23 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,12 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void (*fcn)(void*), void*, void*);
+int thread_join(int);
+void thread_exit(void);
+void cvwake(void);
+void cvwakeall(void);
+void newsleep(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..a026d2c 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,9 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
+entry("cvwake");
+entry("cvwakeall");
+entry("newsleep");
